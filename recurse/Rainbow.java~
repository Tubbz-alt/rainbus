import java.math.BigInteger;
import java.security.*;
import java.util.*;
import java.io.*;
import javax.xml.bing.annotation.adapters.HexBinaryAdapter;

public class Rainbow {
    private char[] hexSet = "0123456789ABCDEF".toCharArray();
    private HashMap<int, String> table; // <Hash, word> (or vice versa??) Rainbow table
    private MessageDigest SHA; // 160 bits
    private int chainLen = 200;

    public Rainbow() {
        table = new HashMap<int, String>();
        try {
            SHA = MessageDigest.getInstance("SHA1");
        } catch (Exception e) {
            System.out.println("Exception: " + e);
        }
        generate();
    }

    //---- HASHING ----------------------------------------
    public byte[] hash(byte[] plaintext) {
        byte digest[] = new byte[20];
        try {
            digest = SHA.digest(plaintext);
            SHA.reset();
        } catch (Exception e) {
            System.out.println("Exception: " + e);
        }
        return digest;
    }

    //---- REDUCE FUNCTION --------------------------------
    public byte[] reduce(byte[] digest, int len) {
        byte[] reduction = new byte[3];
        int i1 = len % 20;
        int i2 = (len + 1) % 20;
        int i3 = (len + 2) % 20;
        int n = len + bytesToInt(
        reduction[0] = 
    }

    //---- INVERTING --------------------------------------
    public byte[] invert(byte[] hash) {
        byte[] digest, result, plaintext;
        // Start from the end of the chain and move forwards
        for (int len = chainLen - 1; len >= 0; len--) {
            digest = hash;
            for (int i = len; i < chainLen; i++) {
                plaintext = reduce(digest, i);
                digest = hash(plaintext);
            }
            if (table.containsKey(plaintext)) {
                result = invertChain(table.get(plaintext), hash);
                if (result != null) {
                    return result;
                }
            }
        }
        return null;
    }

    public byte[] invertChain(byte[] plaintext, byte[] hash) {
         byte[] digest;
         for (int i = 0; i < chainLen; i++) {
             digest = hash(plaintext);
             if (digest.equals(hash)) {
                 return plaintext;
             }
             plaintext = reduce(digest, i);
         }
         return null;
    }

    //---- GENERATE TABLE ---------------------------------
    public void generate() {
        byte[] plaintext, reduction;
        int collisions = 0;
        long time1, time2;

        System.out.println("\nGenerating table...");
        time1 = System.currentTimeMillis();

        for (int i = 0; i < rows; i++) {
            plaintext = intToBytes(i);
            reduction = generateChain(plaintext);
            table.put(i, bytesToHex(reduction));
            // USE THE FOLLOWING IF USING THE HASH AS KEYS INSTEAD OF WORD
            if (!table.containsKey(reduction)) {
                table.put(reduction, plaintext);
            } else {
                collisions++;
            } // END
        }
        time2 = System.currentTimeMillis();
        System.out.println("Table generated in " + ((time2 - time1)/100)  + " seconds");
        System.out.println("Number of collisions: " + collisions;
    }

    public byte[] generateChain(byte[] plaintext) {
        byte[] digest;
        byte[] reduction = plaintext;
        for (int len = 0; len < chainLen; len++) {
            digest = hash(reduction);
            reduction = reduce(digest, len);
        }
        return reduction;
    }

    //---- HELPER FUNCTIONS -------------------------------
    public String getHexWord(int n) {
        // Get last 3 bytes of n for word
        byte word[] = new byte[3];
        word[0] = (byte) n & 0xFF;
        word[1] = (byte) ((n >> 8) & 0xFF);
        word[2] = (byte) ((n >> 16) & 0xFF);
        return bytesToHex(word); // IS THIS NECESSARY???
    }

    public byte[] hexToBytes(String hexString) {
        HexBinaryAdapter adapter = new HexBinaryAdapter();
        byte[] bytes = adapter.unmarshal(hexString);
        return bytes;
    }

    public String bytesToHex(byte[] bytes) {
        HexBinaryAdapter adapter = new HexBinaryAdapter();
        String str = adapter.marshal(bytes);
        return str;
    }

    public byte[] intToBytes(int n) {
        byte plaintext[] = new byte[3]
        plaintext[0] = (byte) n & 0xFF;
        plaintext[1] = (byte) ((n >> 8) & 0xFF);
        plaintext[2] = (byte) ((n >> 16) & 0x0F);
        return plaintext;
    }

    public int bytesToInt(byte[] bytes) {
        return java.nio.ByteBuffer.wrap(bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN).getInt();
    }

    public void writeToFile(String file) {
        ObjectOutputStream O;
        try {
            O = new ObjectOutputStream(new FileOutputStream(file));
            O.writeObject(table);
            O.close();
            System.out.println("Rainbow table has been written to file " + file);
        } catch (Exception e) {
            System.out.println("Exception: " + e);
        }
    }
}

/* EOF */
